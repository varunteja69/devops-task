Parameters:
  Environment:
    Type: String
    Description: The environment name (dev, staging, prod)
    AllowedValues:
      - dev
      - staging
      - prod
    Default: dev

  DBName:
    Type: String
    Default: MyDatabase

  DBUsername:
    Type: String
    Default: admin

  DBPassword:
    Type: String
    NoEcho: true
    Description: The password for the database user

Resources:

  # VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.0.${Environment}0.0/16'
      EnableDnsSupport: true
      EnableDnsHostname: true

  # Subnets
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Sub '10.0.${Environment}1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Sub '10.0.${Environment}2.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  # Security Group for EC2
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub "Allow SSH and HTTP access for ${Environment}"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0' # Restrict this in production
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0' # Restrict this in production

  # EC2 Instance
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c55b159cbfafe1f0 # Replace with a valid AMI ID
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

  # RDS Instance
  MyRDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: mysql
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: '20'
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub "Subnet group for RDS in ${Environment}"
      SubnetIds:
        - !Ref PrivateSubnet
      DBSubnetGroupName: !Sub "${Environment}-db-subnet-group"
